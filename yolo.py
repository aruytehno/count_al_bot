import cv2
import numpy as np
from pathlib import Path
from datetime import datetime
from ultralytics import YOLO

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
MODEL_PATH = "yolov8n.pt"  # –ò–ª–∏ –≤–∞—à–∞ –∫–∞—Å—Ç–æ–º–Ω–∞—è –º–æ–¥–µ–ª—å
CONFIDENCE_THRESH = 0.5  # –ü–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
IOU_THRESH = 0.45  # –ü–æ—Ä–æ–≥ –¥–ª—è –ø–æ–¥–∞–≤–ª–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤


def load_model():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç YOLO –º–æ–¥–µ–ª—å"""
    model = YOLO(MODEL_PATH)
    return model


def process_image(model, input_path, output_dir):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é YOLO"""
    Path(output_dir).mkdir(parents=True, exist_ok=True)

    # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    img = cv2.imread(str(input_path))
    if img is None:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å {input_path.name}")
        return 0

    # –î–µ—Ç–µ–∫—Ü–∏—è –æ–±—ä–µ–∫—Ç–æ–≤
    results = model.predict(
        source=img,
        conf=CONFIDENCE_THRESH,
        iou=IOU_THRESH,
        show_labels=True,
        show_conf=True
    )

    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    result_img = results[0].plot()

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    output_path = Path(output_dir) / f"yolo_result_{timestamp}_{input_path.name}"
    cv2.imwrite(str(output_path), result_img)

    return len(results[0].boxes)


def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏
    print("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ YOLO...")
    model = load_model()
    print("‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞")

    # –ü—É—Ç–∏ –∫ –¥–∞–Ω–Ω—ã–º
    input_dir = Path("dataset/input")
    output_dir = Path("dataset/output_yolo")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    total = 0
    for img_path in input_dir.glob("*.*"):
        if img_path.suffix.lower() in ('.jpg', '.jpeg', '.png'):
            count = process_image(model, img_path, output_dir)
            print(f"üìä {img_path.name}: {count} —Ç—Ä—É–±")
            total += count

    print(f"\n‚úÖ –ì–æ—Ç–æ–≤–æ! –í—Å–µ–≥–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Ç—Ä—É–±: {total}")


if __name__ == "__main__":
    main()