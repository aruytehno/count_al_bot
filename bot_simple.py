import os
import telebot
from ultralytics import YOLO
import cv2
from dotenv import load_dotenv
import logging
import numpy as np
from io import BytesIO
from PIL import Image, UnidentifiedImageError
from roboflow import Roboflow

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π
MODELS = {
    "rectangle": "models/rectangle.pt",
}
models_cache = {}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(os.getenv('BOT_TOKEN'))


@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    welcome_text = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ PipeDetectorBot!\n\n"
        "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç—Ä—É–± –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.\n"
        "–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.\n\n"
        "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: JPEG, PNG (–º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä 10MB)"
    )
    bot.send_message(message.chat.id, welcome_text)


@bot.message_handler(content_types=['photo', 'document'])
def handle_photo(message):
    chat_id = message.chat.id
    file_id = None

    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
        if message.photo:
            file_id = message.photo[-1].file_id
        elif message.document:
            if not message.document.mime_type.startswith('image/'):
                raise ValueError("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞")
            file_id = message.document.file_id
        else:
            raise ValueError("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")

        # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ä–∞–∑–º–µ—Ä–∞
        file_info = bot.get_file(file_id)
        if file_info.file_size > 10 * 1024 * 1024:
            raise ValueError("–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä 10MB)")

        file_bytes = bot.download_file(file_info.file_path)
        img = read_image(file_bytes)

        # –õ–µ–Ω–∏–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
        pipe_type = "rectangle"
        if pipe_type not in models_cache:
            models_cache[pipe_type] = YOLO(MODELS[pipe_type])
            logger.info(f"–ú–æ–¥–µ–ª—å {pipe_type} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")

        # –î–µ—Ç–µ–∫—Ü–∏—è —Ç—Ä—É–±
        result_img, count = detect_pipes(img, pipe_type)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å –æ—á–∏—Å—Ç–∫–æ–π –±—É—Ñ–µ—Ä–∞
        byte_io = image_to_bytes(result_img)
        try:
            bot.send_photo(
                chat_id,
                byte_io,
                caption=f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: –Ω–∞–π–¥–µ–Ω–æ —Ç—Ä—É–± - {count}"
            )
        finally:
            byte_io.close()

    except Exception as e:
        error_msg = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}"
        logger.error(f"Chat {chat_id}: {error_msg}")
        bot.send_message(chat_id, error_msg)


def read_image(file_bytes):
    """–ß—Ç–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –±–∞–π—Ç–æ–≤"""
    try:
        img = np.array(Image.open(BytesIO(file_bytes)))
        if len(img.shape) == 2:  # Grayscale to RGB
            img = cv2.cvtColor(img, cv2.COLOR_GRAY2RGB)
        elif img.shape[2] == 4:  # RGBA to RGB
            img = cv2.cvtColor(img, cv2.COLOR_RGBA2RGB)
        return img
    except UnidentifiedImageError:
        raise ValueError("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")


def detect_pipes(image, pipe_type):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é YOLO"""
    results = models_cache[pipe_type](
        image,
        imgsz=1024,
        conf=0.6,
        verbose=False
    )

    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    result_img = results[0].plot(
        line_width=2,
        font_size=0.8,
        labels=True,
        pil=True
    )

    # –ü–æ–¥—Å—á—ë—Ç –æ–±—ä–µ–∫—Ç–æ–≤
    count = len(results[0].boxes)

    return result_img, count


def image_to_bytes(img):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –±–∞–π—Ç—ã"""
    if isinstance(img, np.ndarray):
        img = Image.fromarray(img)

    byte_io = BytesIO()
    img.save(byte_io, format='JPEG', quality=90)
    byte_io.seek(0)
    return byte_io

def download_dataset():
    rf = Roboflow(api_key=os.getenv("ROBOFLOW_API_KEY"))
    project = rf.workspace("austral").project("com-aus-3")
    dataset = project.version(1).download("yolov8")
    print('dataset –∑–∞–≥—Ä—É–∂–µ–Ω')


if __name__ == "__main__":
    download_dataset()
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    bot.infinity_polling()