import os
import telebot
from ultralytics import YOLO
import cv2
from dotenv import load_dotenv
import logging
import numpy as np
from io import BytesIO
from PIL import Image, UnidentifiedImageError
import threading
from roboflow import Roboflow

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

load_dotenv()


class UnifiedModelLoader:
    """–ö–ª–∞—Å—Å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –µ–¥–∏–Ω–æ–π –º–æ–¥–µ–ª—å—é"""
    _instance = None
    _lock = threading.Lock()

    def __new__(cls):
        if cls._instance is None:
            with cls._lock:
                if cls._instance is None:
                    cls._instance = super().__new__(cls)
                    cls._instance._initialize()
        return cls._instance

    def _initialize(self):
        self.model_path = "models/com-aus-3.pt"
        os.makedirs("models", exist_ok=True)

        if not os.path.exists(self.model_path):
            self._download_model()

        try:
            self.model = YOLO(self.model_path)
            self.class_names = self.model.names
            logger.info(f"–ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª–∞—Å—Å—ã: {self.class_names}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {str(e)}")
            raise

    def _download_model(self):
        """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ —á–µ—Ä–µ–∑ Roboflow API"""
        try:
            logger.info("–ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ —Å Roboflow...")
            rf = Roboflow(api_key=os.getenv("ROBOFLOW_API_KEY"))
            project = rf.workspace("austral").project("com-aus-3")
            project.version(1).download("yolov8", location="models")

            # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Ñ–∞–π–ª –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
            os.rename("models/com-aus-3/weights/best.pt", self.model_path)
            logger.info("–ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –º–æ–¥–µ–ª–∏: {str(e)}")
            raise

    def get_model(self):
        return self.model

    def get_class_names(self):
        return self.class_names


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –º–æ–¥–µ–ª–∏
bot = telebot.TeleBot(os.getenv('BOT_TOKEN'))

try:
    model_loader = UnifiedModelLoader()
    detection_model = model_loader.get_model()
    class_names = model_loader.get_class_names()
except Exception as e:
    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥–µ–ª—å: {str(e)}")
    exit(1)


@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    welcome_text = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ PipeDetectorBot!\n\n"
        "üì∏ –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç—Ä—É–± –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.\n\n"
        "–ë–æ—Ç –æ–ø—Ä–µ–¥–µ–ª–∏—Ç –∏ –ø–æ—Å—á–∏—Ç–∞–µ—Ç:\n"
        "- –ö—Ä—É–≥–ª—ã–µ —Ç—Ä—É–±—ã\n"
        "- –ö–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ/–ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã–µ —Ç—Ä—É–±—ã\n"
        "- –î—Ä—É–≥–∏–µ –º–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—Ñ–∏–ª–∏\n\n"
        "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: JPEG, PNG"
    )
    bot.send_message(message.chat.id, welcome_text)


@bot.message_handler(content_types=['photo', 'document'])
def handle_photo(message):
    chat_id = message.chat.id

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if message.photo:
            file_id = message.photo[-1].file_id
        elif message.document and message.document.mime_type.startswith('image/'):
            file_id = message.document.file_id
        else:
            raise ValueError("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JPEG –∏–ª–∏ PNG")

        # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        file_info = bot.get_file(file_id)
        file_bytes = bot.download_file(file_info.file_path)

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        img = read_image(file_bytes)
        result_img, counts = detect_objects(img)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report = "üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:\n"
        for class_id, count in counts.items():
            class_name = class_names.get(class_id, f"–û–±—ä–µ–∫—Ç {class_id}")
            report += f"‚Ä¢ {class_name}: {count}\n"
        report += f"\n–í—Å–µ–≥–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ: {sum(counts.values())}"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        bot.send_photo(
            chat_id,
            image_to_bytes(result_img),
            caption=report
        )

    except Exception as e:
        error_msg = f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}"
        logger.error(f"Chat {chat_id}: {error_msg}", exc_info=True)
        bot.send_message(chat_id, error_msg)
        bot.send_message(chat_id, "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥—Ä—É–≥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")


def read_image(file_bytes):
    """–ß—Ç–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –±–∞–π—Ç–æ–≤"""
    try:
        img = np.array(Image.open(BytesIO(file_bytes)))
        if len(img.shape) == 2:  # Grayscale
            img = cv2.cvtColor(img, cv2.COLOR_GRAY2RGB)
        elif img.shape[2] == 4:  # RGBA
            img = cv2.cvtColor(img, cv2.COLOR_RGBA2RGB)
        return img
    except Exception as e:
        raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")


def detect_objects(image):
    """–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏"""
    results = detection_model(
        image,
        imgsz=1024,
        conf=0.5,
        verbose=False
    )

    # –ü–æ–¥—Å—á–µ—Ç –æ–±—ä–µ–∫—Ç–æ–≤ –ø–æ –∫–ª–∞—Å—Å–∞–º
    counts = {}
    for box in results[0].boxes:
        class_id = int(box.cls)
        counts[class_id] = counts.get(class_id, 0) + 1

    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
    result_img = results[0].plot(
        line_width=1,
        font_size=0.6,
        labels=True,
        pil=True
    )

    return result_img, counts


def image_to_bytes(img):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –±–∞–π—Ç—ã"""
    img_pil = Image.fromarray(img)
    byte_io = BytesIO()
    img_pil.save(byte_io, format='JPEG', quality=85)
    byte_io.seek(0)
    return byte_io


if __name__ == "__main__":
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    bot.infinity_polling()