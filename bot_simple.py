import os
import telebot
from ultralytics import YOLO
import cv2
from dotenv import load_dotenv
import uuid
import logging
import numpy as np
from io import BytesIO
from PIL import Image, UnidentifiedImageError

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π
MODELS = {
    "round": "models/rou.pt",
    "rectangle": "models/rectangle.pt"
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(os.getenv('BOT_TOKEN'))
models_cache = {}


# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
def load_models():
    for pipe_type, path in MODELS.items():
        try:
            models_cache[pipe_type] = YOLO(path)
            logger.info(f"–ú–æ–¥–µ–ª—å {pipe_type} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ {pipe_type}: {str(e)}")


load_models()


@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    markup = telebot.types.ReplyKeyboardMarkup(
        row_width=2,
        resize_keyboard=True
    )
    btn1 = telebot.types.KeyboardButton("–ö—Ä—É–≥–ª—ã–µ")
    btn2 = telebot.types.KeyboardButton("–ö–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ")
    markup.add(btn1, btn2)

    welcome_text = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ PipeDetectorBot!\n\n"
        "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç—Ä—É–± –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:\n"
        "1. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç—Ä—É–±\n"
        "2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é\n"
        "3. –ü–æ–ª—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –ø–æ–¥—Å—á–µ—Ç–æ–º\n\n"
        "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: JPEG, PNG"
    )

    bot.send_message(message.chat.id, welcome_text, reply_markup=markup)


@bot.message_handler(func=lambda m: m.text in ["–ö—Ä—É–≥–ª—ã–µ", "–ö–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ"])
def handle_pipe_type(message):
    chat_id = message.chat.id
    pipe_type = "round" if message.text == "–ö—Ä—É–≥–ª—ã–µ" else "rectangle"

    if pipe_type not in models_cache:
        bot.send_message(chat_id, "‚ö†Ô∏è –ú–æ–¥–µ–ª—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
        return

    bot.send_message(
        chat_id,
        f"üîÑ –û–∂–∏–¥–∞—é —Ñ–æ—Ç–æ –¥–ª—è {message.text} —Ç—Ä—É–±...\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ—Ç–∫–æ–µ —Ñ–æ—Ç–æ —Ç—Ä—É–± —Å–≤–µ—Ä—Ö—É. "
        "–î–ª—è –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–∑–±–µ–≥–∞–π—Ç–µ –±–ª–∏–∫–æ–≤ –∏ —Å–∏–ª—å–Ω—ã—Ö —Ç–µ–Ω–µ–π."
    )
    bot.register_next_step_handler(message, process_photo, pipe_type)


def process_photo(message, pipe_type):
    chat_id = message.chat.id
    file_id = None

    try:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        if message.photo:
            file_id = message.photo[-1].file_id
        elif message.document:
            if message.document.mime_type.split('/')[0] != 'image':
                raise ValueError("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞")
            file_id = message.document.file_id
        else:
            raise ValueError("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")

        # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        file_info = bot.get_file(file_id)
        file_bytes = bot.download_file(file_info.file_path)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤ –ø–∞–º—è—Ç–∏
        img = read_image(file_bytes)
        result_img, count = detect_pipes(img, pipe_type)

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        result_bytes = image_to_bytes(result_img)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        bot.send_photo(
            chat_id,
            result_bytes,
            caption=f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞: –Ω–∞–π–¥–µ–Ω–æ —Ç—Ä—É–± - {count}"
        )

        # –í–æ–∑–≤—Ä–∞—Ç –º–µ–Ω—é
        send_welcome(message)

    except Exception as e:
        error_msg = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}"
        logger.error(f"Chat {chat_id}: {error_msg}")
        bot.send_message(chat_id, error_msg)
        send_welcome(message)


def read_image(file_bytes):
    """–ß—Ç–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –±–∞–π—Ç–æ–≤ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ñ–æ—Ä–º–∞—Ç–∞"""
    try:
        img = np.array(Image.open(BytesIO(file_bytes)))
        if len(img.shape) == 2:  # Grayscale to RGB
            img = cv2.cvtColor(img, cv2.COLOR_GRAY2RGB)
        elif img.shape[2] == 4:  # RGBA to RGB
            img = cv2.cvtColor(img, cv2.COLOR_RGBA2RGB)
        return img
    except UnidentifiedImageError:
        raise ValueError("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")


def detect_pipes(image, pipe_type):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é YOLO"""
    # –î–µ—Ç–µ–∫—Ü–∏—è
    results = models_cache[pipe_type](
        image,
        imgsz=1024,
        conf=0.6,
        verbose=False  # –û—Ç–∫–ª—é—á–∞–µ–º –ª–∏—à–Ω–∏–µ –ª–æ–≥–∏
    )

    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    result_img = results[0].plot(
        line_width=2,
        font_size=0.8,
        labels=True,
        pil=True
    )

    # –ü–æ–¥—Å—á—ë—Ç –æ–±—ä–µ–∫—Ç–æ–≤
    count = len(results[0].boxes)

    return result_img, count


def image_to_bytes(img):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –±–∞–π—Ç—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏"""
    img_pil = Image.fromarray(img)
    byte_io = BytesIO()
    img_pil.save(byte_io, format='JPEG', quality=90)
    byte_io.seek(0)
    return byte_io


if __name__ == "__main__":
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    bot.infinity_polling()