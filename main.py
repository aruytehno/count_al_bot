import cv2
import numpy as np
import os
from pathlib import Path
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
MIN_AREA = 100  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–ª–æ—â–∞–¥—å –∫–æ–Ω—Ç—É—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è
CIRCULARITY_THRESH = 0.7  # –ü–æ—Ä–æ–≥ –∫—Ä—É–≥–ª–æ—Å—Ç–∏ (1.0 - –∏–¥–µ–∞–ª—å–Ω—ã–π –∫—Ä—É–≥)
CANNY_THRESH = (50, 150)  # –ü–æ—Ä–æ–≥–∏ –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ –∫—Ä–∞—ë–≤
BLUR_SIZE = (5, 5)  # –†–∞–∑–º–µ—Ä —Ä–∞–∑–º—ã—Ç–∏—è
CONTOUR_COLOR = (0, 255, 0)  # –ó–µ–ª—ë–Ω—ã–π —Ü–≤–µ—Ç –¥–ª—è –∫–æ–Ω—Ç—É—Ä–æ–≤
CONTOUR_THICKNESS = 3  # –¢–æ–ª—â–∏–Ω–∞ –ª–∏–Ω–∏–π –∫–æ–Ω—Ç—É—Ä–æ–≤
CENTER_COLOR = (0, 0, 255)  # –ö—Ä–∞—Å–Ω—ã–π —Ü–≤–µ—Ç –¥–ª—è —Ü–µ–Ω—Ç—Ä–æ–≤
CENTER_RADIUS = 5  # –†–∞–∑–º–µ—Ä —Ç–æ—á–∫–∏ –≤ —Ü–µ–Ω—Ç—Ä–µ
TEXT_COLOR = (0, 0, 255)  # –ö—Ä–∞—Å–Ω—ã–π —Ü–≤–µ—Ç –¥–ª—è —Ç–µ–∫—Å—Ç–∞
TEXT_SCALE = 1.5  # –†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞


def is_circular(contour):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Å–∫–æ–ª—å–∫–æ –∫–æ–Ω—Ç—É—Ä –±–ª–∏–∑–æ–∫ –∫ –∫—Ä—É–≥—É"""
    area = cv2.contourArea(contour)
    if area == 0:
        return False

    perimeter = cv2.arcLength(contour, True)
    if perimeter == 0:
        return False

    # –í—ã—á–∏—Å–ª—è–µ–º –∫—Ä—É–≥–ª–æ—Å—Ç—å
    circularity = 4 * np.pi * area / (perimeter ** 2)
    return circularity > CIRCULARITY_THRESH


def process_image(input_path, output_dir):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    # –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    Path(output_dir).mkdir(parents=True, exist_ok=True)

    # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    img = cv2.imread(str(input_path))
    if img is None:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å {input_path.name}")
        return 0

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ø–∏—é –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    original_img = img.copy()

    # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    blurred = cv2.GaussianBlur(gray, BLUR_SIZE, 0)

    # –î–µ—Ç–µ–∫—Ü–∏—è –∫—Ä–∞—ë–≤
    edges = cv2.Canny(blurred, *CANNY_THRESH)

    # –ü–æ–∏—Å–∫ –∫–æ–Ω—Ç—É—Ä–æ–≤
    contours, _ = cv2.findContours(edges, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç—É—Ä–æ–≤
    valid_contours = []
    for cnt in contours:
        area = cv2.contourArea(cnt)
        if area > MIN_AREA and is_circular(cnt):
            valid_contours.append(cnt)

    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
    result_img = img.copy()

    # –†–∏—Å—É–µ–º –∫–æ–Ω—Ç—É—Ä—ã
    cv2.drawContours(result_img, valid_contours, -1, CONTOUR_COLOR, CONTOUR_THICKNESS)

    # –†–∏—Å—É–µ–º —Ü–µ–Ω—Ç—Ä—ã –∏ –Ω—É–º–µ—Ä—É–µ–º –∫—Ä—É–≥–∏
    for i, cnt in enumerate(valid_contours):
        # –í—ã—á–∏—Å–ª—è–µ–º —Ü–µ–Ω—Ç—Ä –∫–æ–Ω—Ç—É—Ä–∞
        M = cv2.moments(cnt)
        if M["m00"] != 0:
            cX = int(M["m10"] / M["m00"])
            cY = int(M["m01"] / M["m00"])
            # –†–∏—Å—É–µ–º —Ü–µ–Ω—Ç—Ä –∫—Ä—É–≥–∞
            cv2.circle(result_img, (cX, cY), CENTER_RADIUS, CENTER_COLOR, -1)
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä –∫—Ä—É–≥–∞
            cv2.putText(result_img, str(i + 1), (cX - 10, cY + 5),
                        cv2.FONT_HERSHEY_SIMPLEX, 0.8, (255, 0, 0), 2)

    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
    cv2.putText(result_img, f"Detected Circles: {len(valid_contours)}", (20, 50),
                cv2.FONT_HERSHEY_SIMPLEX, TEXT_SCALE, TEXT_COLOR, 3)

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö
    params_text = f"MinArea: {MIN_AREA}, Circularity: {CIRCULARITY_THRESH}"
    cv2.putText(result_img, params_text, (20, 100),
                cv2.FONT_HERSHEY_SIMPLEX, 0.8, TEXT_COLOR, 2)

    # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –æ—Ä–∏–≥–∏–Ω–∞–ª–æ–º –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
    comparison_img = np.hstack((original_img, result_img))

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    output_path = Path(output_dir) / f"result_{timestamp}_{input_path.name}"
    cv2.imwrite(str(output_path), comparison_img)

    return len(valid_contours)


def main():
    # –ü—É—Ç–∏ –∫ –¥–∞–Ω–Ω—ã–º
    input_dir = Path("dataset/input")
    output_dir = Path("dataset/output")

    print("üîç –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")
    print(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:")
    print(f"  MIN_AREA: {MIN_AREA}")
    print(f"  CIRCULARITY_THRESH: {CIRCULARITY_THRESH}")
    print(f"  CANNY_THRESH: {CANNY_THRESH}")
    print(f"  BLUR_SIZE: {BLUR_SIZE}")

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ JPG/PNG –≤ –ø–∞–ø–∫–µ
    total_count = 0
    image_count = 0
    for img_path in input_dir.glob("*.*"):
        if img_path.suffix.lower() in ('.jpg', '.jpeg', '.png'):
            count = process_image(img_path, output_dir)
            print(f"üìä {img_path.name}: {count} –∫—Ä—É–≥–æ–≤")
            total_count += count
            image_count += 1

    print(f"\n‚úÖ –ì–æ—Ç–æ–≤–æ! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {image_count}")
    print(f"üì¶ –í—Å–µ–≥–æ –∫—Ä—É–≥–æ–≤ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ: {total_count}")


if __name__ == "__main__":
    main()