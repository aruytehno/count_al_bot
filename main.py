import cv2
import numpy as np
from pathlib import Path
from datetime import datetime
import sys

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
MIN_AREA = 100  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–ª–æ—â–∞–¥—å –∫–æ–Ω—Ç—É—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è
CIRCULARITY_THRESH = 0.7  # –ü–æ—Ä–æ–≥ –∫—Ä—É–≥–ª–æ—Å—Ç–∏ (1.0 - –∏–¥–µ–∞–ª—å–Ω—ã–π –∫—Ä—É–≥)
CANNY_THRESH = (50, 150)  # –ü–æ—Ä–æ–≥–∏ –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ –∫—Ä–∞—ë–≤
BLUR_SIZE = (5, 5)  # –†–∞–∑–º–µ—Ä —Ä–∞–∑–º—ã—Ç–∏—è
CONTOUR_COLOR = (0, 255, 0)  # –ó–µ–ª—ë–Ω—ã–π —Ü–≤–µ—Ç –¥–ª—è –∫–æ–Ω—Ç—É—Ä–æ–≤
CONTOUR_THICKNESS = 3  # –¢–æ–ª—â–∏–Ω–∞ –ª–∏–Ω–∏–π –∫–æ–Ω—Ç—É—Ä–æ–≤
CENTER_COLOR = (0, 0, 255)  # –ö—Ä–∞—Å–Ω—ã–π —Ü–≤–µ—Ç –¥–ª—è —Ü–µ–Ω—Ç—Ä–æ–≤
CENTER_RADIUS = 5  # –†–∞–∑–º–µ—Ä —Ç–æ—á–∫–∏ –≤ —Ü–µ–Ω—Ç—Ä–µ
TEXT_COLOR = (0, 0, 255)  # –ö—Ä–∞—Å–Ω—ã–π —Ü–≤–µ—Ç –¥–ª—è —Ç–µ–∫—Å—Ç–∞
TEXT_SCALE = 1.5  # –†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞


def validate_paths(input_dir: Path, output_dir: Path) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≤—Ö–æ–¥–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏ —Å–æ–∑–¥–∞—ë—Ç –≤—ã—Ö–æ–¥–Ω—É—é"""
    if not input_dir.exists():
        print(f"‚ùå –û—à–∏–±–∫–∞: –í—Ö–æ–¥–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {input_dir} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
        return False

    try:
        output_dir.mkdir(parents=True, exist_ok=True)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤—ã—Ö–æ–¥–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {e}")
        return False

    return True


def is_circular(contour):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Å–∫–æ–ª—å–∫–æ –∫–æ–Ω—Ç—É—Ä –±–ª–∏–∑–æ–∫ –∫ –∫—Ä—É–≥—É"""
    area = cv2.contourArea(contour)
    if area == 0:
        return False

    perimeter = cv2.arcLength(contour, True)
    if perimeter == 0:
        return False

    circularity = 4 * np.pi * area / (perimeter ** 2)
    return circularity > CIRCULARITY_THRESH


def process_image(input_path: Path, output_dir: Path) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    try:
        img = cv2.imread(str(input_path))
        if img is None:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å {input_path.name}")
            return 0

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
        blurred = cv2.GaussianBlur(gray, BLUR_SIZE, 0)
        edges = cv2.Canny(blurred, *CANNY_THRESH)

        contours, _ = cv2.findContours(edges, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
        valid_contours = [cnt for cnt in contours if cv2.contourArea(cnt) > MIN_AREA and is_circular(cnt)]

        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
        result_img = img.copy()
        cv2.drawContours(result_img, valid_contours, -1, CONTOUR_COLOR, CONTOUR_THICKNESS)

        for i, cnt in enumerate(valid_contours):
            M = cv2.moments(cnt)
            if M["m00"] != 0:
                cX = int(M["m10"] / M["m00"])
                cY = int(M["m01"] / M["m00"])
                cv2.circle(result_img, (cX, cY), CENTER_RADIUS, CENTER_COLOR, -1)
                cv2.putText(result_img, str(i + 1), (cX - 10, cY + 5),
                            cv2.FONT_HERSHEY_SIMPLEX, 0.8, (255, 0, 0), 2)

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        output_path = output_dir / f"result_{timestamp}_{input_path.name}"
        cv2.imwrite(str(output_path), result_img)

        return len(valid_contours)

    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {input_path.name}: {e}")
        return 0


def main():
    input_dir = Path("dataset/input")
    output_dir = Path("dataset/output")

    if not validate_paths(input_dir, output_dir):
        sys.exit(1)

    print("üîç –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")
    print(f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏:\n"
          f"  MIN_AREA: {MIN_AREA}\n"
          f"  CIRCULARITY_THRESH: {CIRCULARITY_THRESH}\n"
          f"  CANNY_THRESH: {CANNY_THRESH}\n"
          f"  BLUR_SIZE: {BLUR_SIZE}")

    total_count = 0
    processed_files = 0

    for img_path in input_dir.glob("*.*"):
        if img_path.suffix.lower() in ('.jpg', '.jpeg', '.png'):
            count = process_image(img_path, output_dir)
            print(f"üìä {img_path.name}: {count} –æ–±—ä–µ–∫—Ç–æ–≤")
            total_count += count
            processed_files += 1

    print(f"\n‚úÖ –ì–æ—Ç–æ–≤–æ! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {processed_files}")
    print(f"üì¶ –í—Å–µ–≥–æ –æ–±—ä–µ–∫—Ç–æ–≤ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ: {total_count}")


from pathlib import Path


def setup_directories():
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç–∏
    base_dir = Path("dataset")
    input_dir = base_dir / "input"
    output_dir = base_dir / "output"

    try:
        # –°–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        input_dir.mkdir(parents=True, exist_ok=True)
        output_dir.mkdir(parents=True, exist_ok=True)
        print(f"‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã:")
        print(f"   - –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {input_dir}")
        print(f"   - –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {output_dir}")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π: {e}")
        return False


if __name__ == "__main__":
    setup_directories()
    main()