from ultralytics import YOLO
import os
import argparse
import torch
import time
from datetime import timedelta


def print_gpu_info():
    """–í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ GPU, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ"""
    if torch.cuda.is_available():
        print(f"üñ•Ô∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ GPU: {torch.cuda.device_count()}")
        for i in range(torch.cuda.device_count()):
            print(f"  GPU {i}: {torch.cuda.get_device_name(i)}")
    else:
        print("üñ•Ô∏è GPU –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è CPU")


def train_model(data_path, epochs=100, imgsz=640, batch=8, model_name="yolov8n.pt", patience=50, resume=False):
    """–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ YOLOv8 –Ω–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–º –¥–∞—Ç–∞—Å–µ—Ç–µ"""
    # –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ
    print_gpu_info()
    start_time = time.time()

    # –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ–¥–æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
    model = YOLO(model_name)

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    device = "0" if torch.cuda.is_available() and os.getenv("USE_GPU", "False") == "True" else "cpu"
    print(f"‚öôÔ∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {'GPU' if device == '0' else 'CPU'}")

    # –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    try:
        results = model.train(
            data=data_path,
            epochs=epochs,
            imgsz=imgsz,
            batch=batch,
            project="pipe_detection",
            name="pipe_train",
            save=True,
            val=True,
            device=device,
            resume=resume,
            patience=patience,  # –†–∞–Ω–Ω—è—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —É–ª—É—á—à–µ–Ω–∏–π
            augment=True,  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
            optimizer="auto",  # –ê–≤—Ç–æ–≤—ã–±–æ—Ä –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞
            lr0=0.01,  # –ù–∞—á–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è
            lrf=0.01,  # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è
            momentum=0.937,  # –ú–æ–º–µ–Ω—Ç—É–º –¥–ª—è SGD
            weight_decay=0.0005,  # –í–µ—Å –¥–µ–∫–∞–∏
            warmup_epochs=3,  # –ü—Ä–æ–≥—Ä–µ–≤
            box=7.5,  # –í–µ—Å –ø–æ—Ç–µ—Ä–∏ –±–æ–∫—Å–æ–≤
            cls=0.5,  # –í–µ—Å –ø–æ—Ç–µ—Ä–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
            dfl=1.5,  # –í–µ—Å –ø–æ—Ç–µ—Ä–∏ DFL
            close_mosaic=10,  # –û—Ç–∫–ª—é—á–µ–Ω–∏–µ mosaic –∑–∞ 10 —ç–ø–æ—Ö –¥–æ –∫–æ–Ω—Ü–∞
            nbs=64,  # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ä–∞ –±–∞—Ç—á–∞
            pretrained=True,  # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–µ–¥–æ–±—É—á–µ–Ω–Ω—ã–µ –≤–µ—Å–∞
        )

        # –≠–∫—Å–ø–æ—Ä—Ç –ª—É—á—à–µ–π –º–æ–¥–µ–ª–∏ –≤ —Ñ–æ—Ä–º–∞—Ç—ã ONNX –∏ TorchScript
        print("üîÑ –≠–∫—Å–ø–æ—Ä—Ç –º–æ–¥–µ–ª–∏ –≤ ONNX –∏ TorchScript...")
        model.export(format="onnx")  # –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ production
        model.export(format="torchscript")  # –î–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤

        # –í—ã–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏ –æ–±—É—á–µ–Ω–∏—è
        training_time = timedelta(seconds=int(time.time() - start_time))
        print(f"‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è: {training_time}")

        return results

    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –û–±—É—á–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º! –ü–æ—Å–ª–µ–¥–Ω—è—è –º–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")
        print(f"üîÑ –î–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: --resume")
        return None


if __name__ == "__main__":
    """
    –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:
    –û–±—ã—á–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ: python train.py --data com-aus-3-1/data.yaml --epochs 150 --imgsz 1024
    
–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –æ–±—É—á–µ–Ω–∏—è: python train.py --resume --data com-aus-3-1/data.yaml --model pipe_detection/pipe_train/weights/last.pt --imgsz 1024 --epochs 150
               
               –° GPU: USE_GPU=True python train.py
"""
    parser = argparse.ArgumentParser(description="Train YOLOv8 model on custom dataset")
    parser.add_argument("--data", default="com-aus-3-1/data.yaml", help="Path to dataset YAML file")
    parser.add_argument("--epochs", type=int, default=100, help="Number of training epochs")
    parser.add_argument("--imgsz", type=int, default=640, help="Image size for training")
    parser.add_argument("--batch", type=int, default=8, help="Batch size")
    parser.add_argument("--model", default="yolov8n.pt", help="Base model to use")
    parser.add_argument("--patience", type=int, default=50, help="Early stopping patience")
    parser.add_argument("--resume", action="store_true", help="Resume training from last checkpoint")

    args = parser.parse_args()

    print(f"üöÄ –ù–∞—á–∞–ª–æ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ –Ω–∞ {args.epochs} —ç–ø–æ—Ö...")
    results = train_model(
        data_path=args.data,
        epochs=args.epochs,
        imgsz=args.imgsz,
        batch=args.batch,
        model_name=args.model,
        patience=args.patience,
        resume=args.resume
    )

    if results is not None:
        print("‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –õ—É—á—à–∞—è –º–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤:")
        print(f"   - pipe_detection/pipe_train/weights/best.pt")
        print(f"   - pipe_detection/pipe_train/weights/best.onnx")