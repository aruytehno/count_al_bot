# train.py
from ultralytics import YOLO
import os
import argparse


def train_model(data_path, epochs=100, imgsz=640, batch=8, model_name="yolov8n.pt"):
    """–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ YOLOv8 –Ω–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–º –¥–∞—Ç–∞—Å–µ—Ç–µ"""
    # –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ–¥–æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
    model = YOLO(model_name)

    # –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
    results = model.train(
        data=data_path,
        epochs=epochs,
        imgsz=imgsz,
        batch=batch,
        project="pipe_detection",
        name="pipe_train",
        save=True,
        val=True,
        device="0" if os.getenv("USE_GPU", "False") == "True" else "cpu"
    )

    # –≠–∫—Å–ø–æ—Ä—Ç –ª—É—á—à–µ–π –º–æ–¥–µ–ª–∏ –≤ —Ñ–æ—Ä–º–∞—Ç ONNX
    model.export(format="onnx")

    return results


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Train YOLOv8 model on custom dataset")
    parser.add_argument("--data", default="com-aus-3-1/data.yaml", help="Path to dataset YAML file")
    parser.add_argument("--epochs", type=int, default=100, help="Number of training epochs")
    parser.add_argument("--imgsz", type=int, default=640, help="Image size for training")
    parser.add_argument("--batch", type=int, default=8, help="Batch size")
    parser.add_argument("--model", default="yolov8n.pt", help="Base model to use")

    args = parser.parse_args()

    print(f"üöÄ –ù–∞—á–∞–ª–æ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ –Ω–∞ {args.epochs} —ç–ø–æ—Ö...")
    results = train_model(
        data_path=args.data,
        epochs=args.epochs,
        imgsz=args.imgsz,
        batch=args.batch,
        model_name=args.model
    )
    print("‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –õ—É—á—à–∞—è –º–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ pipe_detection/pipe_train/weights/best.pt")